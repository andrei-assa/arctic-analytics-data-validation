# Issue 7 notes:

### Text ### --> pd.read_csv
# mimetypes.guess_type("this_is_a_text_file.txt")
# Out[10]: ('text/plain', None)
# In[11]: mimetypes.guess_type("this_is_a_tab_delimited_file.tsv")
# Out[11]: ('text/tab-separated-values', None)
# Out[2]: ('text/csv', None)

### JSON ### --> pd.read_json
# mimetypes.guess_type("/Users/andrei_assa/1617287125679.json")
# Out[3]: ('application/json', None)

### Excel ### --> pd.read_excel
# In[7]: mimetypes.guess_type("Book1.xlsx")
# Out[7]: ('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', None)
# mimetypes.guess_type("no_extension_excel.xls")
# Out[9]: ('application/vnd.ms-excel', None)
# --> if the file has multiple sheets, prompt the user to select the desired sheet

### No extension ### --> You are on your own
# mimetypes.guess_type("no_extension_excel")
# Out[8]: (None, None)

        
# Consider using "Strategy" design pattern by selecting relevant I/O function based on file type (see below)

# loader_function_dictionary = {".xlsx" : pd.read_excel, ".csv": pd.read_csv}
# loader_function = loader_function_dictionary.get(file_extension)
# if it is excel, loader_function = pd.read_excel, etc, if the extension does not exist, it is None.
# if loader function is not None:
    # uploaded_data_df = loader_function(uploaded_file)
#
